diff -Naur a/asl-1.0.42/adobe/cmath.hpp b/asl-1.0.42/adobe/cmath.hpp
--- a/asl-1.0.42/adobe/cmath.hpp	2010-05-13 12:16:36.000000000 -0400
+++ b/asl-1.0.42/adobe/cmath.hpp	2011-05-28 18:57:37.563012502 -0400
@@ -37,14 +37,14 @@
 
 #define ADOBE_HAS_CPP_CMATH 
 
-#elif ((__GNUC__ == 4) && (__GNUC_MINOR__ <= 4))
+#elif ((__GNUC__ == 4) && (__GNUC_MINOR__ <= 6))
 /*
     The currently supported version of GNUC has C99 extensions in math.h. But no TR1 extensions.
 */
 #define ADOBE_HAS_C99_MATH_H
  
 #else
-#error "Unknown GCC compiler configuration for cmath (last known version is 4.0.1)."
+#error "Unknown GCC compiler configuration for cmath (last known version is 4.6.0)."
 #endif
 
 #elif defined(_MSC_VER)
diff -Naur a/asl-1.0.42/source/any_regular.cpp b/asl-1.0.42/source/any_regular.cpp
--- a/asl-1.0.42/source/any_regular.cpp	2010-05-13 12:16:34.000000000 -0400
+++ b/asl-1.0.42/source/any_regular.cpp	2011-05-28 20:33:59.333850388 -0400
@@ -52,6 +52,7 @@
 
 template <typename T>
 struct serializable : serializable_t {
+    serializable() { };
     void operator () (std::ostream& out, const any_regular_t& x) const
     { out << format(x.cast<T>()); }
 };
diff -Naur a/cmake/Modules/FindJASPER.cmake b/cmake/Modules/FindJASPER.cmake
--- a/cmake/Modules/FindJASPER.cmake	1969-12-31 19:00:00.000000000 -0500
+++ b/cmake/Modules/FindJASPER.cmake	2011-05-28 20:47:33.644986571 -0400
@@ -0,0 +1,37 @@
+# - Try to find the Jasper JPEG2000 library
+# Once done this will define
+#
+#  JASPER_FOUND - system has Jasper
+#  JASPER_INCLUDE_DIR - the Jasper include directory
+#  JASPER_LIBRARIES - The libraries needed to use Jasper
+
+#=============================================================================
+# Copyright 2006-2009 Kitware, Inc.
+# Copyright 2006 Alexander Neundorf <neundorf@kde.org>
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+FIND_PACKAGE(JPEG)
+
+FIND_PATH(JASPER_INCLUDE_DIR jasper/jasper.h)
+
+FIND_LIBRARY(JASPER_LIBRARY NAMES jasper libjasper)
+
+# handle the QUIETLY and REQUIRED arguments and set JASPER_FOUND to TRUE if 
+# all listed variables are TRUE
+INCLUDE(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(Jasper DEFAULT_MSG JASPER_LIBRARY JASPER_INCLUDE_DIR JPEG_LIBRARIES)
+
+IF (JASPER_FOUND)
+   SET(JASPER_LIBRARIES ${JASPER_LIBRARY} ${JPEG_LIBRARIES} )
+ENDIF (JASPER_FOUND)
+
+MARK_AS_ADVANCED(JASPER_INCLUDE_DIR JASPER_LIBRARY)
diff -Naur a/OfxHostSupport/src/ofxhPropertySuite.cpp b/OfxHostSupport/src/ofxhPropertySuite.cpp
--- a/OfxHostSupport/src/ofxhPropertySuite.cpp	2010-05-13 12:16:56.000000000 -0400
+++ b/OfxHostSupport/src/ofxhPropertySuite.cpp	2011-05-28 19:03:29.648036517 -0400
@@ -933,6 +933,11 @@
         return NULL;
       }
 
+      template class PropertyTemplate<IntValue>;
+      template class PropertyTemplate<DoubleValue>;
+      template class PropertyTemplate<StringValue>;
+      template class PropertyTemplate<PointerValue>;
+
     }
   }
 }
diff -Naur a/ramen/CMakeLists.txt b/ramen/CMakeLists.txt
--- a/ramen/CMakeLists.txt	2010-07-24 06:39:47.000000000 -0400
+++ b/ramen/CMakeLists.txt	2011-05-28 20:47:57.554193270 -0400
@@ -142,6 +142,7 @@
 # imageio libraries
 FIND_PACKAGE( OpenEXR REQUIRED)
 FIND_PACKAGE( JPEG REQUIRED)
+FIND_PACKAGE( JASPER REQUIRED)
 FIND_PACKAGE( PNG REQUIRED)
 FIND_PACKAGE( TIFF REQUIRED)
 FIND_PACKAGE( OpenImageIO REQUIRED)
@@ -187,6 +188,7 @@
                 ${OPENIMAGEIO_LIBRARIES}
 		${OPENEXR_LIBRARIES}
 		${JPEG_LIBRARIES}
+        ${JASPER_LIBRARIES}
 		${PNG_LIBRARIES}
 		${TIFF_LIBRARIES}
 
diff -Naur a/ramen/ramen/app/document.cpp b/ramen/ramen/app/document.cpp
--- a/ramen/ramen/app/document.cpp	2010-07-21 19:00:53.000000000 -0400
+++ b/ramen/ramen/app/document.cpp	2011-05-28 16:45:49.751961870 -0400
@@ -56,7 +56,7 @@
 
     if( !ofs.is_open())
     {
-	application_t::Instance().error( std::string( "Couldn't open output file ") + file_.external_file_string());
+	application_t::Instance().error( std::string( "Couldn't open output file ") + file_.native());
 	return;
     }
 
diff -Naur a/ramen/ramen/app/preferences.cpp b/ramen/ramen/app/preferences.cpp
--- a/ramen/ramen/app/preferences.cpp	2010-07-21 18:52:09.000000000 -0400
+++ b/ramen/ramen/app/preferences.cpp	2011-05-28 16:54:01.999007738 -0400
@@ -15,6 +15,7 @@
 #include<boost/archive/xml_oarchive.hpp>
 
 #include<boost/filesystem/fstream.hpp>
+#include<boost/filesystem/operations.hpp>
 
 #include<ramen/serialization/archive.hpp>
 
@@ -88,13 +89,13 @@
 
     if( !ofs.is_open())
     {
-	application_t::Instance().error( "Couldn't open preferences file for writting. file = " + p.external_file_string());
+	application_t::Instance().error( "Couldn't open preferences file for writting. file = " + p.native());
 	return;
     }
 
     if( !ofs.good())
     {
-	application_t::Instance().error( "Couldn't open preferences file for writting. file = " + p.external_file_string());
+	application_t::Instance().error( "Couldn't open preferences file for writting. file = " + p.native());
 	return;
     }
 
diff -Naur a/ramen/ramen/imageio/cineon/cineon_writer.cpp b/ramen/ramen/imageio/cineon/cineon_writer.cpp
--- a/ramen/ramen/imageio/cineon/cineon_writer.cpp	2010-07-19 07:42:22.000000000 -0400
+++ b/ramen/ramen/imageio/cineon/cineon_writer.cpp	2011-05-28 17:01:59.359927981 -0400
@@ -25,7 +25,7 @@
 				const image::const_image_view_t& view,
 				const adobe::dictionary_t& params) const
 {
-    std::ofstream out( p.external_file_string().c_str(), std::ios_base::binary);
+    std::ofstream out( p.native().c_str(), std::ios_base::binary);
 
     if( !out)
 	throw std::runtime_error( "can't open file");
@@ -39,7 +39,7 @@
 
     strcpy( fi.version, "V4.5");
 
-    strncpy( (char *) fi.file_name, p.external_file_string().c_str(), sizeof( fi.file_name ));
+    strncpy( (char *) fi.file_name, p.native().c_str(), sizeof( fi.file_name ));
 
     // compute the current date and time
     boost::posix_time::ptime localTime = boost::posix_time::second_clock::local_time();
diff -Naur a/ramen/ramen/imageio/dpx/dpx_reader.cpp b/ramen/ramen/imageio/dpx/dpx_reader.cpp
--- a/ramen/ramen/imageio/dpx/dpx_reader.cpp	2010-07-20 17:45:01.000000000 -0400
+++ b/ramen/ramen/imageio/dpx/dpx_reader.cpp	2011-05-28 17:03:21.697211970 -0400
@@ -63,7 +63,7 @@
 
 dpx_reader_t::dpx_reader_t( const boost::filesystem::path& p) : reader_t( p)
 {
-    std::ifstream ifile( p.external_file_string().c_str(), std::ios_base::binary);
+    std::ifstream ifile( p.native().c_str(), std::ios_base::binary);
 
     if( !ifile)
 	throw std::runtime_error( "Can't open file");
@@ -141,7 +141,7 @@
 
 void dpx_reader_t::do_read_image( const image::image_view_t& view, const Imath::Box2i& crop, int subsample) const
 {
-    std::ifstream ifile( path_.external_file_string().c_str(), std::ios_base::binary);
+    std::ifstream ifile( path_.native().c_str(), std::ios_base::binary);
 
     if( !ifile)
 	throw std::runtime_error( "Can't open file");
diff -Naur a/ramen/ramen/imageio/dpx/dpx_writer.cpp b/ramen/ramen/imageio/dpx/dpx_writer.cpp
--- a/ramen/ramen/imageio/dpx/dpx_writer.cpp	2010-05-13 12:16:32.000000000 -0400
+++ b/ramen/ramen/imageio/dpx/dpx_writer.cpp	2011-05-28 17:04:07.449036116 -0400
@@ -142,7 +142,7 @@
 				const adobe::dictionary_t& params) const
 {
 
-    std::ofstream out( p.external_file_string().c_str(), std::ios_base::binary);
+    std::ofstream out( p.native().c_str(), std::ios_base::binary);
 
     if( !out)
 	throw std::runtime_error( "can't open file");
diff -Naur a/ramen/ramen/imageio/exr/exr_reader.cpp b/ramen/ramen/imageio/exr/exr_reader.cpp
--- a/ramen/ramen/imageio/exr/exr_reader.cpp	2010-07-21 18:52:56.000000000 -0400
+++ b/ramen/ramen/imageio/exr/exr_reader.cpp	2011-05-28 17:05:30.336301961 -0400
@@ -20,12 +20,12 @@
 {
     bool tiled;
 
-    if(!Imf::isOpenExrFile( p.external_file_string().c_str(), tiled))
+    if(!Imf::isOpenExrFile( p.native().c_str(), tiled))
 	throw std::runtime_error( "Can't open file");
 
     if( tiled)
     {
-	Imf::TiledInputFile ifile( p.external_file_string().c_str());
+	Imf::TiledInputFile ifile( p.native().c_str());
 	header_ = ifile.header();
 
 	if( ifile.levelMode() != Imf::ONE_LEVEL)
@@ -33,7 +33,7 @@
     }
     else
     {
-	Imf::InputFile ifile( p.external_file_string().c_str());
+	Imf::InputFile ifile( p.native().c_str());
 	header_ = ifile.header();
     }
 
diff -Naur a/ramen/ramen/imageio/exr/exr_writer.cpp b/ramen/ramen/imageio/exr/exr_writer.cpp
--- a/ramen/ramen/imageio/exr/exr_writer.cpp	2010-06-26 06:34:10.000000000 -0400
+++ b/ramen/ramen/imageio/exr/exr_writer.cpp	2011-05-28 17:06:18.681373897 -0400
@@ -124,7 +124,7 @@
     if( save_alpha)
         frameBuffer.insert( "A", Imf::Slice( Imf::HALF, ptr, xstride, ystride));
 
-    Imf::OutputFile out_file( p.external_file_string().c_str(), header);
+    Imf::OutputFile out_file( p.native().c_str(), header);
     out_file.setFrameBuffer( frameBuffer);
     out_file.writePixels( img.height());
 }
@@ -143,7 +143,7 @@
 
     frameBuffer.insert( "A", Imf::Slice( Imf::HALF, ptr, xstride, ystride));
 
-    Imf::OutputFile out_file( p.external_file_string().c_str(), header);
+    Imf::OutputFile out_file( p.native().c_str(), header);
     out_file.setFrameBuffer( frameBuffer);
     out_file.writePixels( img.height());
 }
@@ -170,7 +170,7 @@
     if( save_alpha)
         frameBuffer.insert( "A", Imf::Slice( Imf::FLOAT, ptr, xstride, ystride));
 
-    Imf::OutputFile out_file( p.external_file_string().c_str(), header);
+    Imf::OutputFile out_file( p.native().c_str(), header);
     out_file.setFrameBuffer( frameBuffer);
     out_file.writePixels( view.height());
 }
@@ -188,7 +188,7 @@
 
     frameBuffer.insert( "A", Imf::Slice( Imf::FLOAT, ptr, xstride, ystride));
 
-    Imf::OutputFile out_file( p.external_file_string().c_str(), header);
+    Imf::OutputFile out_file( p.native().c_str(), header);
     out_file.setFrameBuffer( frameBuffer);
     out_file.writePixels( view.height());
 }
diff -Naur a/ramen/ramen/imageio/factory.cpp b/ramen/ramen/imageio/factory.cpp
--- a/ramen/ramen/imageio/factory.cpp	2010-07-22 07:52:42.000000000 -0400
+++ b/ramen/ramen/imageio/factory.cpp	2011-05-28 17:00:33.942745588 -0400
@@ -56,7 +56,7 @@
 
 factory_impl::const_iterator factory_impl::format_for_extension( const boost::filesystem::path& p) const
 {
-    std::string ext( p.extension());
+    std::string ext( p.extension().string());
 
     if( !ext.empty())
     {
diff -Naur a/ramen/ramen/imageio/hdr/hdr_writer.cpp b/ramen/ramen/imageio/hdr/hdr_writer.cpp
--- a/ramen/ramen/imageio/hdr/hdr_writer.cpp	2010-05-26 16:01:12.000000000 -0400
+++ b/ramen/ramen/imageio/hdr/hdr_writer.cpp	2011-05-28 17:12:16.416240175 -0400
@@ -3,6 +3,7 @@
 // See CDDL_LICENSE.txt for a copy of the license.
 
 #include<ramen/imageio/hdr/hdr_writer.hpp>
+using namespace OpenImageIO;
 
 namespace ramen
 {
@@ -13,14 +14,14 @@
 				const image::const_image_view_t& view,
 				const adobe::dictionary_t& params) const
 {
-    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.external_file_string()));
+    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.native()));
 
     if( !out.get())
 	throw std::runtime_error( "Write HDR: Can't open output file");
 
     OpenImageIO::ImageSpec spec( view.width(), view.height(), 3, TypeDesc::FLOAT);
 
-    if( !out->open( p.external_file_string(), spec))
+    if( !out->open( p.native(), spec))
 	throw std::runtime_error( "Write HDR: Can't open output file");
 
     char *pixels = (char *) boost::gil::interleaved_view_get_raw_data( view);
diff -Naur a/ramen/ramen/imageio/import_multichannel_exr.cpp b/ramen/ramen/imageio/import_multichannel_exr.cpp
--- a/ramen/ramen/imageio/import_multichannel_exr.cpp	2010-07-21 18:28:01.000000000 -0400
+++ b/ramen/ramen/imageio/import_multichannel_exr.cpp	2011-05-28 17:12:38.375515818 -0400
@@ -80,13 +80,13 @@
 {
     bool tiled;
 
-    if(!Imf::isOpenExrFile( p.external_file_string().c_str(), tiled))
+    if(!Imf::isOpenExrFile( p.native().c_str(), tiled))
     {
 	application_t::Instance().error( "Can't open EXR file");
 	return;
     }
 
-    Imf::InputFile ifile( p.external_file_string().c_str());
+    Imf::InputFile ifile( p.native().c_str());
     const Imf::ChannelList& ch_list( ifile.header().channels());
 
     std::set<std::string> channel_set;
diff -Naur a/ramen/ramen/imageio/oiio/oiio_reader.cpp b/ramen/ramen/imageio/oiio/oiio_reader.cpp
--- a/ramen/ramen/imageio/oiio/oiio_reader.cpp	2010-07-20 17:36:21.000000000 -0400
+++ b/ramen/ramen/imageio/oiio/oiio_reader.cpp	2011-05-28 17:37:27.471513924 -0400
@@ -18,13 +18,13 @@
 
 oiio_reader_t::oiio_reader_t( const boost::filesystem::path& p, float default_gamma) : reader_t( p), gamma_( default_gamma)
 {
-    std::auto_ptr<OpenImageIO::ImageInput> in( OpenImageIO::ImageInput::create( p.external_file_string().c_str()));
+    std::auto_ptr<OpenImageIO::ImageInput> in( OpenImageIO::ImageInput::create( p.native().c_str()));
 
     if( in.get())
     {
 	OpenImageIO::ImageSpec spec;
 
-	if( in->open( p.external_file_string().c_str(), spec))
+	if( in->open( p.native().c_str(), spec))
 	{
 	    info_[adobe::name_t( "domain")] = adobe::any_regular_t( Imath::Box2i( Imath::V2i( 0, 0),
                                                                                   Imath::V2i( spec.width - 1, spec.height - 1)));
@@ -57,13 +57,13 @@
 
 void oiio_reader_t::do_read_image( const image::image_view_t& view, const Imath::Box2i& crop, int subsample) const
 {
-    std::auto_ptr<OpenImageIO::ImageInput> in( OpenImageIO::ImageInput::create( path_.external_file_string().c_str()));
+    std::auto_ptr<OpenImageIO::ImageInput> in( OpenImageIO::ImageInput::create( path_.native().c_str()));
 
     if( in.get())
     {
 	OpenImageIO::ImageSpec spec;
 
-	if( in->open( path_.external_file_string().c_str(), spec))
+	if( in->open( path_.native().c_str(), spec))
 	{
 	    boost::scoped_array<float> buffer( new float[ spec.width * spec.nchannels]);
 
diff -Naur a/ramen/ramen/imageio/oiio/oiio_writer.cpp b/ramen/ramen/imageio/oiio/oiio_writer.cpp
--- a/ramen/ramen/imageio/oiio/oiio_writer.cpp	2010-05-26 15:55:36.000000000 -0400
+++ b/ramen/ramen/imageio/oiio/oiio_writer.cpp	2011-05-28 17:38:16.503225586 -0400
@@ -16,12 +16,12 @@
 void oiio_writer_t::do_write( const boost::filesystem::path& p, const OpenImageIO::ImageSpec& spec,
 				const image::const_image_view_t& view)
 {
-    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.external_file_string().c_str()));
+    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.native().c_str()));
 
     if( !out.get())
 	throw std::runtime_error( "Write image: Can't find a format");
 
-    if( !out->open( p.external_file_string().c_str(), spec))
+    if( !out->open( p.native().c_str(), spec))
 	throw std::runtime_error( "Write image: Can't open file");
 
     char *pixels = (char *) boost::gil::interleaved_view_get_raw_data( view);
diff -Naur a/ramen/ramen/imageio/png/png_writer.cpp b/ramen/ramen/imageio/png/png_writer.cpp
--- a/ramen/ramen/imageio/png/png_writer.cpp	2010-05-26 16:00:54.000000000 -0400
+++ b/ramen/ramen/imageio/png/png_writer.cpp	2011-05-28 17:39:04.408307842 -0400
@@ -18,7 +18,7 @@
 {
     int channels = adobe::get_value( params, adobe::name_t( "channels")).cast<int>();
 
-    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.external_file_string()));
+    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.native()));
 
     if( !out.get())
 	throw std::runtime_error( "Write PNG: Can't open output file");
@@ -31,7 +31,7 @@
     OpenImageIO::ImageSpec spec( view.width(), view.height(), channels, TypeDesc::UINT8);
     spec.quant_dither = 0.0f;
 
-    if( !out->open( p.external_file_string(), spec))
+    if( !out->open( p.native(), spec))
 	throw( std::runtime_error( "Can't open output file"));
     
     std::vector<image::pixel_t> scanline( view.width());
diff -Naur a/ramen/ramen/imageio/read_exr.cpp b/ramen/ramen/imageio/read_exr.cpp
--- a/ramen/ramen/imageio/read_exr.cpp	2010-07-21 14:21:21.000000000 -0400
+++ b/ramen/ramen/imageio/read_exr.cpp	2011-05-28 17:40:47.384902004 -0400
@@ -86,7 +86,7 @@
 		    const Imath::Box2i& crop, const char *rchannel, const char *gchannel,
 		    const char *bchannel, const char *achannel, std::size_t subsample)
 {
-    Imf::InputFile file( p.external_file_string().c_str());
+    Imf::InputFile file( p.native().c_str());
     Imath::Box2i data_window( file.header().dataWindow());
 
     std::size_t width  = data_window.max.x - data_window.min.x + 1;
@@ -154,7 +154,7 @@
     assert( result_view.width() >= std::ceil( (float) (crop.size().x+1) / subsample));
     assert( result_view.height() >= std::ceil( (float) (crop.size().y+1) / subsample));
 
-    Imf::RgbaInputFile file( p.external_file_string().c_str());
+    Imf::RgbaInputFile file( p.native().c_str());
     Imath::Box2i data_window( file.header().dataWindow());
 
     std::size_t width  = data_window.max.x - data_window.min.x + 1;
@@ -230,7 +230,7 @@
 {
     int level = 1;
 
-    Imf::TiledInputFile file( p.external_file_string().c_str());
+    Imf::TiledInputFile file( p.native().c_str());
     Imath::Box2i data_window( file.header().dataWindow());
 
     boost::gil::rgba32f_image_t buffer( file.levelWidth( level), file.levelHeight( level));
@@ -313,7 +313,7 @@
     else
 	level = 2; // quarter
     
-    Imf::TiledInputFile file( p.external_file_string().c_str());
+    Imf::TiledInputFile file( p.native().c_str());
     Imath::Box2i data_window( file.header().dataWindow());
 
     boost::gil::rgba32f_image_t buffer( file.levelWidth( level), file.levelHeight( level));
diff -Naur a/ramen/ramen/imageio/tga/tga_writer.cpp b/ramen/ramen/imageio/tga/tga_writer.cpp
--- a/ramen/ramen/imageio/tga/tga_writer.cpp	2010-05-26 16:01:32.000000000 -0400
+++ b/ramen/ramen/imageio/tga/tga_writer.cpp	2011-05-28 17:39:47.270223565 -0400
@@ -19,7 +19,7 @@
     int channels    = adobe::get_value( params, adobe::name_t( "channels")).cast<int>();
     int compress    = adobe::get_value( params, adobe::name_t( "compress")).cast<int>();
     
-    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.external_file_string()));
+    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.native()));
 
     if( !out.get())
 	throw std::runtime_error( "Write TGA: Can't open output file");
@@ -35,7 +35,7 @@
     if( compress)
 	spec.attribute( "compression", "rle");
 
-    if( !out->open( p.external_file_string(), spec))
+    if( !out->open( p.native(), spec))
 	throw( std::runtime_error( "Can't open output file"));
 
     std::vector<image::pixel_t> scanline( view.width());
diff -Naur a/ramen/ramen/imageio/tiff/tiff_writer.cpp b/ramen/ramen/imageio/tiff/tiff_writer.cpp
--- a/ramen/ramen/imageio/tiff/tiff_writer.cpp	2010-05-26 16:01:42.000000000 -0400
+++ b/ramen/ramen/imageio/tiff/tiff_writer.cpp	2011-05-28 17:42:36.487960203 -0400
@@ -21,7 +21,7 @@
     int depth	 = adobe::get_value( params, adobe::name_t( "type")).cast<int>();
     int compress = adobe::get_value( params, adobe::name_t( "compress")).cast<int>();
 
-    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.external_file_string()));
+    std::auto_ptr<OpenImageIO::ImageOutput> out( OpenImageIO::ImageOutput::create( p.native()));
 
     if( !out.get())
 	throw std::runtime_error( "Write TIFF: Can't open output file");
@@ -65,7 +65,7 @@
     break;
     }
 
-    if( !out->open( p.external_file_string(), spec))
+    if( !out->open( p.native(), spec))
 	throw( std::runtime_error( "Can't open output file"));
 
     std::vector<image::pixel_t> scanline( view.width());
diff -Naur a/ramen/ramen/imageio/write_exr.cpp b/ramen/ramen/imageio/write_exr.cpp
--- a/ramen/ramen/imageio/write_exr.cpp	2010-07-29 15:38:56.000000000 -0400
+++ b/ramen/ramen/imageio/write_exr.cpp	2011-05-28 17:41:54.866003471 -0400
@@ -44,7 +44,7 @@
     if( write_alpha)
         frameBuffer.insert( "A", Imf::Slice( Imf::HALF, ptr, xstride, ystride));
 
-    Imf::OutputFile out_file( p.external_file_string().c_str(), header);
+    Imf::OutputFile out_file( p.native().c_str(), header);
     out_file.setFrameBuffer( frameBuffer);
     out_file.writePixels( img.height());
 }
@@ -64,7 +64,7 @@
 
     frameBuffer.insert( "A", Imf::Slice( Imf::HALF, ptr, xstride, ystride));
 
-    Imf::OutputFile out_file( p.external_file_string().c_str(), header);
+    Imf::OutputFile out_file( p.native().c_str(), header);
     out_file.setFrameBuffer( frameBuffer);
     out_file.writePixels( img.height());
 }
diff -Naur a/ramen/ramen/nodes/image_input/image_input_param.cpp b/ramen/ramen/nodes/image_input/image_input_param.cpp
--- a/ramen/ramen/nodes/image_input/image_input_param.cpp	2010-06-13 14:58:10.000000000 -0400
+++ b/ramen/ramen/nodes/image_input/image_input_param.cpp	2011-05-28 18:16:32.022461419 -0400
@@ -492,7 +492,7 @@
     {
 	if( !boost::filesystem::is_directory( itr->path()))
         {
-            if( itr->path().filename()[0] != '.')
+            if( itr->path().filename().string()[0] != '.')
                 seq.add_path( itr->path());
         }
     }
diff -Naur a/ramen/ramen/ofx/plugin_manager.cpp b/ramen/ramen/ofx/plugin_manager.cpp
--- a/ramen/ramen/ofx/plugin_manager.cpp	2010-07-05 09:54:20.000000000 -0400
+++ b/ramen/ramen/ofx/plugin_manager.cpp	2011-05-28 18:16:53.045096839 -0400
@@ -26,7 +26,7 @@
     imageEffectPluginCache_->registerInCache( *OFX::Host::PluginCache::getPluginCache());
 
     // try to read an old cache
-    std::ifstream ifs( cache_path().external_file_string().c_str());
+    std::ifstream ifs( cache_path().native().c_str());
     OFX::Host::PluginCache::getPluginCache()->readCache( ifs);
     OFX::Host::PluginCache::getPluginCache()->scanPluginFiles();
     ifs.close();
@@ -47,7 +47,7 @@
     }
 
     // save the plugin cache
-    std::ofstream of( cache_path().external_file_string().c_str());
+    std::ofstream of( cache_path().native().c_str());
     OFX::Host::PluginCache::getPluginCache()->writePluginCache( of);
     of.close();
 }
diff -Naur a/ramen/ramen/params/file_param.cpp b/ramen/ramen/params/file_param.cpp
--- a/ramen/ramen/params/file_param.cpp	2010-06-17 14:29:36.000000000 -0400
+++ b/ramen/ramen/params/file_param.cpp	2011-05-28 18:21:29.039267667 -0400
@@ -68,7 +68,7 @@
 std::string file_param_t::extension() const
 {
     boost::filesystem::path p( get_value<boost::filesystem::path>( *this));
-    return p.extension();
+    return p.extension().string();
 }
 
 void file_param_t::set_extension( const std::string& ext)
@@ -212,7 +212,7 @@
 void file_param_t::update_input_text( const boost::filesystem::path& p)
 {
     input_->blockSignals( true);
-    input_->setText( p.external_file_string().c_str());
+    input_->setText( p.native().c_str());
     input_->blockSignals( false);
 }
 
diff -Naur a/ramen/ramen/serialization/path.hpp b/ramen/ramen/serialization/path.hpp
--- a/ramen/ramen/serialization/path.hpp	2010-05-23 17:24:22.000000000 -0400
+++ b/ramen/ramen/serialization/path.hpp	2011-05-28 18:00:33.454505282 -0400
@@ -30,26 +30,10 @@
     p = boost::filesystem::path( x);
 }
 
-template<class Archive>
-void save( Archive& ar, const boost::filesystem::wpath& p, const unsigned int version)
-{
-    std::wstring x( p.string());
-    ar & boost::serialization::make_nvp( "path", x);
-}
-
-template<class Archive>
-void load( Archive& ar, boost::filesystem::wpath& p, const unsigned int version)
-{
-    std::wstring x;
-    ar & boost::serialization::make_nvp( "path", x);
-    p = boost::filesystem::wpath( x);
-}
-
 }
 }
 
 BOOST_SERIALIZATION_SPLIT_FREE( boost::filesystem::path)
-BOOST_SERIALIZATION_SPLIT_FREE( boost::filesystem::wpath)
 
 #endif
 
diff -Naur a/ramen/ramen/ui/main_window.cpp b/ramen/ramen/ui/main_window.cpp
--- a/ramen/ramen/ui/main_window.cpp	2010-08-03 20:31:29.000000000 -0400
+++ b/ramen/ramen/ui/main_window.cpp	2011-05-28 18:31:42.162246429 -0400
@@ -876,7 +876,7 @@
 
 void main_window_t::update_recent_files_menu( const boost::filesystem::path& p)
 {
-    QString fileName( p.external_file_string().c_str());
+    QString fileName( p.native().c_str());
 
     QSettings settings( "cddl.ramen", "Ramen Recent Files");
     QStringList files = settings.value( "recent_file_list").toStringList();
diff -Naur a/ramen/ramen/ui/user_interface.cpp b/ramen/ramen/ui/user_interface.cpp
--- a/ramen/ramen/ui/user_interface.cpp	2010-07-21 19:04:55.000000000 -0400
+++ b/ramen/ramen/ui/user_interface.cpp	2011-05-28 18:32:50.289984712 -0400
@@ -76,7 +76,7 @@
     // restore the last saved window state
     boost::filesystem::path p = system::system_t::Instance().preferences_path() / "wstate.ui";
 
-    QFile file( p.external_file_string().c_str());
+    QFile file( p.native().c_str());
 
     if( file.open( QIODevice::ReadOnly))
     {
@@ -114,7 +114,7 @@
 
     QByteArray window_state = window_->saveState();
     boost::filesystem::path p = system::system_t::Instance().preferences_path() / "wstate.ui";
-    QFile file( p.external_file_string().c_str());
+    QFile file( p.native().c_str());
 
     if( file.open( QIODevice::WriteOnly))
 	file.write( window_state);
diff -Naur a/ramen/ramen/util/format.hpp b/ramen/ramen/util/format.hpp
--- a/ramen/ramen/util/format.hpp	2010-06-01 10:05:02.000000000 -0400
+++ b/ramen/ramen/util/format.hpp	2011-05-28 16:33:04.727194324 -0400
@@ -14,6 +14,7 @@
 #define RAMEN_FORMAT_HPP
 
 #include<boost/serialization/serialization.hpp>
+#include<boost/serialization/nvp.hpp>
 
 #include<OpenEXR/ImathBox.h>
 
diff -Naur a/ramen/ramen/util/path_sequence.cpp b/ramen/ramen/util/path_sequence.cpp
--- a/ramen/ramen/util/path_sequence.cpp	2010-05-13 12:16:34.000000000 -0400
+++ b/ramen/ramen/util/path_sequence.cpp	2011-05-28 18:40:08.589560958 -0400
@@ -26,7 +26,7 @@
 path_sequence_t::path_sequence_t( const boost::filesystem::path& p, bool sequence)
 {
     dir_ = p.branch_path();
-    std::string str = p.leaf();
+    std::string str = p.leaf().string();
 
     boost::tuple<std::string, std::string, std::string> parts( decompose_filename( str));
 
@@ -104,7 +104,7 @@
     if( new_dir.string() != dir_.string())
         return false;
 
-    std::string str = p.leaf();
+    std::string str = p.leaf().string();
     boost::tuple<std::string, std::string, std::string> parts( decompose_filename( str));
         
     std::string new_base = boost::get<0>( parts);
